@page "/movies"
@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using TutoDebutantBlazor.Entities
@using TutoDebutantBlazor.Data
@using TutoDebutantBlazor.Services
@implements IAsyncDisposable
@inject IDbContextFactory<TutoDebutantBlazor.Data.MoviesDbContext> DbFactory


<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="movies/create">Create New</a>
</p>

<input type="search" @bind="titleFilter" />
<button type="submit">Ok</button>

<div>
<QuickGrid Class="table" Items="FilteredMovies" Pagination="pagination">
    <PropertyColumn Property="movie => movie.Title" Title="Titre" Sortable="true" />
    <PropertyColumn Property="movie => movie.ReleaseDate" Title="Date de sortie" Sortable="true" />
    <PropertyColumn Property="movie => movie.Genre" Title="Genre" Sortable="true" />
    <PropertyColumn Property="movie => movie.Price" Title="Prix" Sortable="true"  />
    <PropertyColumn Property="movie => movie.Rating" Title="Note" Sortable="true" />

    <TemplateColumn Context="movie">
        <a href="@($"movies/edit?id={movie.Id}")">Edit</a> |
        <a href="@($"movies/details?id={movie.Id}")">Details</a> |
        <a href="@($"movies/delete?id={movie.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>
<Paginator State="pagination" />
</div>

@code {
    private string titleFilter = string.Empty;

    private MoviesDbContext context = default!;   

    [Inject]
    private MoviesService service { get; set;  } = default!;

    private PaginationState pagination = new PaginationState { ItemsPerPage = 2 };  

    private IQueryable<Movie> FilteredMovies{
        get {
            Console.WriteLine("titleFilter: " + titleFilter);
            return context.Movie.Where(m => m.Title!.Contains(titleFilter));
        }
    }
        


    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
        var movies = service.GetMovies();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();




}
